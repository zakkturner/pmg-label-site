Webflow.define(
        "navbar",
        (module.exports = function ($, _) {
          var api = {};
          var tram = $.tram;
          var $win = $(window);
          var $doc = $(document);
          var $body;
          var $navbars;
          var designer;
          var inEditor;
          var inApp = Webflow.env();
          var overlay = '<div class="w-nav-overlay" data-wf-ignore />';
          var namespace = ".w-nav";
          var navbarOpenedButton = "w--open";
          var navbarOpenedDropdown = "w--nav-dropdown-open";
          var navbarOpenedDropdownToggle = "w--nav-dropdown-toggle-open";
          var navbarOpenedDropdownList = "w--nav-dropdown-list-open";
          var navbarOpenedLink = "w--nav-link-open";
          var ix = IXEvents.triggers;
          var menuSibling = $(); // -----------------------------------
          // Module methods

          api.ready = api.design = api.preview = init;

          api.destroy = function () {
            menuSibling = $();
            removeListeners();

            if ($navbars && $navbars.length) {
              $navbars.each(teardown);
            }
          }; // -----------------------------------
          // Private methods

          function init() {
            designer = inApp && Webflow.env("design");
            inEditor = Webflow.env("editor");
            $body = $(document.body); // Find all instances on the page

            $navbars = $doc.find(namespace);

            if (!$navbars.length) {
              return;
            }

            $navbars.each(build); // Wire events

            removeListeners();
            addListeners();
          }

          function removeListeners() {
            Webflow.resize.off(resizeAll);
          }

          function addListeners() {
            Webflow.resize.on(resizeAll);
          }

          function resizeAll() {
            $navbars.each(resize);
          }

          function build(i, el) {
            var $el = $(el); // Store state in data

            var data = $.data(el, namespace);

            if (!data) {
              data = $.data(el, namespace, {
                open: false,
                el: $el,
                config: {}
              });
            }

            data.menu = $el.find(".w-nav-menu");
            data.links = data.menu.find(".w-nav-link");
            data.dropdowns = data.menu.find(".w-dropdown");
            data.dropdownToggle = data.menu.find(".w-dropdown-toggle");
            data.dropdownList = data.menu.find(".w-dropdown-list");
            data.button = $el.find(".w-nav-button");
            data.container = $el.find(".w-container");
            data.outside = outside(data); // Remove old events

            data.el.off(namespace);
            data.button.off(namespace);
            data.menu.off(namespace); // Set config from data attributes

            configure(data); // Add events based on mode

            if (designer) {
              removeOverlay(data);
              data.el.on("setting" + namespace, handler(data));
            } else {
              addOverlay(data);
              data.button.on("click" + namespace, toggle(data));
              data.menu.on("click" + namespace, "a", navigate(data));
            } // Trigger initial resize

            resize(i, el);
          }

          function teardown(i, el) {
            var data = $.data(el, namespace);

            if (data) {
              removeOverlay(data);
              $.removeData(el, namespace);
            }
          }

          function removeOverlay(data) {
            if (!data.overlay) {
              return;
            }

            close(data, true);
            data.overlay.remove();
            data.overlay = null;
          }

          function addOverlay(data) {
            if (data.overlay) {
              return;
            }

            data.overlay = $(overlay).appendTo(data.el);
            data.parent = data.menu.parent();
            close(data, true);
          }

          function configure(data) {
            var config = {};
            var old = data.config || {}; // Set config options from data attributes

            var animation = (config.animation =
              data.el.attr("data-animation") || "default");
            config.animOver = /^over/.test(animation);
            config.animDirect = /left$/.test(animation) ? -1 : 1; // Re-open menu if the animation type changed

            if (old.animation !== animation) {
              data.open && _.defer(reopen, data);
            }

            config.easing = data.el.attr("data-easing") || "ease";
            config.easing2 = data.el.attr("data-easing2") || "ease";
            var duration = data.el.attr("data-duration");
            config.duration = duration != null ? Number(duration) : 400;
            config.docHeight = data.el.attr("data-doc-height"); // Store config in data

            data.config = config;
          }

          function handler(data) {
            return function (evt, options) {
              options = options || {};
              var winWidth = $win.width();
              configure(data);
              options.open === true && open(data, true);
              options.open === false && close(data, true); // Reopen if media query changed after setting

              data.open &&
                _.defer(function () {
                  if (winWidth !== $win.width()) {
                    reopen(data);
                  }
                });
            };
          }

          function reopen(data) {
            if (!data.open) {
              return;
            }

            close(data, true);
            open(data, true);
          }

          function toggle(data) {
            // Debounce toggle to wait for accurate open state
            return _.debounce(function () {
              data.open ? close(data) : open(data);
            });
          }

          function navigate(data) {
            return function (evt) {
              var link = $(this);
              var href = link.attr("href"); // Avoid late clicks on touch devices

              if (!Webflow.validClick(evt.currentTarget)) {
                evt.preventDefault();
                return;
              } // Close when navigating to an in-page anchor

              if (href && href.indexOf("#") === 0 && data.open) {
                close(data);
              }
            };
          }

          function outside(data) {
            // Unbind previous click handler if it exists
            if (data.outside) {
              $doc.off("click" + namespace, data.outside);
            }

            return function (evt) {
              var $target = $(evt.target); // Ignore clicks on Editor overlay UI

              if (
                inEditor &&
                $target.closest(".w-editor-bem-EditorOverlay").length
              ) {
                return;
              } // Close menu when clicked outside, debounced to wait for state

              outsideDebounced(data, $target);
            };
          }

          var outsideDebounced = _.debounce(function (data, $target) {
            if (!data.open) {
              return;
            }

            var menu = $target.closest(".w-nav-menu");

            if (!data.menu.is(menu)) {
              close(data);
            }
          });

          function resize(i, el) {
            var data = $.data(el, namespace); // Check for collapsed state based on button display

            var collapsed = (data.collapsed =
              data.button.css("display") !== "none"); // Close menu if button is no longer visible (and not in designer)

            if (data.open && !collapsed && !designer) {
              close(data, true);
            } // Set max-width of links + dropdowns to match container

            if (data.container.length) {
              var updateEachMax = updateMax(data);
              data.links.each(updateEachMax);
              data.dropdowns.each(updateEachMax);
            } // If currently open, update height to match body

            if (data.open) {
              setOverlayHeight(data);
            }
          }

          var maxWidth = "max-width";

          function updateMax(data) {
            // Set max-width of each element to match container
            var containMax = data.container.css(maxWidth);

            if (containMax === "none") {
              containMax = "";
            }

            return function (i, link) {
              link = $(link);
              link.css(maxWidth, ""); // Don't set the max-width if an upstream value exists

              if (link.css(maxWidth) === "none") {
                link.css(maxWidth, containMax);
              }
            };
          }

          function addMenuOpen(i, el) {
            el.setAttribute("data-nav-menu-open", "");
          }

          function removeMenuOpen(i, el) {
            el.removeAttribute("data-nav-menu-open");
          }

          function open(data, immediate) {
            if (data.open) {
              return;
            }

            data.open = true;
            data.menu.each(addMenuOpen);
            data.links.addClass(navbarOpenedLink);
            data.dropdowns.addClass(navbarOpenedDropdown);
            data.dropdownToggle.addClass(navbarOpenedDropdownToggle);
            data.dropdownList.addClass(navbarOpenedDropdownList);
            data.button.addClass(navbarOpenedButton);
            var config = data.config;
            var animation = config.animation;

            if (animation === "none" || !tram.support.transform) {
              immediate = true;
            }

            var bodyHeight = setOverlayHeight(data);
            var menuHeight = data.menu.outerHeight(true);
            var menuWidth = data.menu.outerWidth(true);
            var navHeight = data.el.height();
            var navbarEl = data.el[0];
            resize(0, navbarEl);
            ix.intro(0, navbarEl);
            Webflow.redraw.up(); // Listen for click outside events

            if (!designer) {
              $doc.on("click" + namespace, data.outside);
            } // No transition for immediate

            if (immediate) {
              return;
            }

            var transConfig =
              "transform " + config.duration + "ms " + config.easing; // Add menu to overlay

            if (data.overlay) {
              menuSibling = data.menu.prev();
              data.overlay.show().append(data.menu);
            } // Over left/right

            if (config.animOver) {
              tram(data.menu)
                .add(transConfig)
                .set({
                  x: config.animDirect * menuWidth,
                  height: bodyHeight
                })
                .start({
                  x: 0
                });
              data.overlay && data.overlay.width(menuWidth);
              return;
            } // Drop Down

            var offsetY = navHeight + menuHeight;
            tram(data.menu)
              .add(transConfig)
              .set({
                y: -offsetY
              })
              .start({
                y: 0
              });
          }

          function setOverlayHeight(data) {
            var config = data.config;
            var bodyHeight = config.docHeight ? $doc.height() : $body.height();

            if (config.animOver) {
              data.menu.height(bodyHeight);
            } else if (data.el.css("position") !== "fixed") {
              bodyHeight -= data.el.height();
            }

            data.overlay && data.overlay.height(bodyHeight);
            return bodyHeight;
          }

          function close(data, immediate) {
            if (!data.open) {
              return;
            }

            data.open = false;
            data.button.removeClass(navbarOpenedButton);
            var config = data.config;

            if (
              config.animation === "none" ||
              !tram.support.transform ||
              config.duration <= 0
            ) {
              immediate = true;
            }

            ix.outro(0, data.el[0]); // Stop listening for click outside events

            $doc.off("click" + namespace, data.outside);

            if (immediate) {
              tram(data.menu).stop();
              complete();
              return;
            }

            var transConfig =
              "transform " + config.duration + "ms " + config.easing2;
            var menuHeight = data.menu.outerHeight(true);
            var menuWidth = data.menu.outerWidth(true);
            var navHeight = data.el.height(); // Over left/right

            if (config.animOver) {
              tram(data.menu)
                .add(transConfig)
                .start({
                  x: menuWidth * config.animDirect
                })
                .then(complete);
              return;
            } // Drop Down

            var offsetY = navHeight + menuHeight;
            tram(data.menu)
              .add(transConfig)
              .start({
                y: -offsetY
              })
              .then(complete);

            function complete() {
              data.menu.height("");
              tram(data.menu).set({
                x: 0,
                y: 0
              });
              data.menu.each(removeMenuOpen);
              data.links.removeClass(navbarOpenedLink);
              data.dropdowns.removeClass(navbarOpenedDropdown);
              data.dropdownToggle.removeClass(navbarOpenedDropdownToggle);
              data.dropdownList.removeClass(navbarOpenedDropdownList);

              if (data.overlay && data.overlay.children().length) {
                // Move menu back to parent at the original location
                menuSibling.length
                  ? data.menu.insertAfter(menuSibling)
                  : data.menu.prependTo(data.parent);
                data.overlay.attr("style", "").hide();
              } // Trigger event so other components can hook in (dropdown)

              data.el.triggerHandler("w-close");
            }
          } // Export module

          return api;
        })
      );